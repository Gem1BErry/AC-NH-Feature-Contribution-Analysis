# --- 4.2.1 Global Feature Importance ---

# 1. 创建SHAP解释器并计算SHAP值
explainer = shap.TreeExplainer(xgb_model)
shap_values = explainer.shap_values(X_test)

# --- 新增部分：计算并展示全局特征重要性的具体数值 ---

# 2. 计算每个特征的平均绝对SHAP值
mean_abs_shap_values = np.abs(shap_values).mean(axis=0)
feature_names = X_test.columns

# 创建一个DataFrame来存储特征及其重要性
global_feature_importance_df = pd.DataFrame({
    'Feature': feature_names,
    'Mean_Absolute_SHAP_Value': mean_abs_shap_values
})

# 按重要性降序排序
global_feature_importance_df = global_feature_importance_df.sort_values(
    by='Mean_Absolute_SHAP_Value', ascending=False
).reset_index(drop=True)

# 打印表格（方案A的核心产出）
print("\n--- Global Feature Importance (Ranked) ---")
print(global_feature_importance_df.to_string()) # 使用 .to_string() 保证完整打印


# --- 可视化部分 ---

# 3. 生成全局特征重要性图 (Bar Plot) - 不带数值标注
plt.figure(figsize=(10, 8))
# 使用排序后的数据进行绘图，确保条形图也是有序的
sns.barplot(
    x='Mean_Absolute_SHAP_Value',
    y='Feature',
    data=global_feature_importance_df,
    orient='h',
    palette='viridis' # 使用一个好看的调色板
)
plt.title('Global Feature Importance (Mean Absolute SHAP Value)', fontsize=16)
plt.xlabel('Average Impact on Model Output Magnitude', fontsize=12)
plt.ylabel('Feature', fontsize=12)
plt.tight_layout()
# plt.savefig('figure_global_feature_importance_bar.png', dpi=300)
plt.show()


# 4. (方案B) 生成带数值标注的全局特征重要性图
plt.figure(figsize=(12, 8))
# 创建条形图
ax = sns.barplot(
    x='Mean_Absolute_SHAP_Value',
    y='Feature',
    data=global_feature_importance_df,
    orient='h',
    palette='viridis'
)

# 在每个条形上添加数值标签
for i, v in enumerate(global_feature_importance_df['Mean_Absolute_SHAP_Value']):
    ax.text(v + 0.001, i, f'{v:.3f}', color='black', va='center') # v + 0.001 是为了防止标签和条形末端重叠

plt.xlim(0, global_feature_importance_df['Mean_Absolute_SHAP_Value'].max() * 1.1) # 调整x轴范围以容纳标签
plt.title('Global Feature Importance with Value Labels', fontsize=16)
plt.xlabel('Mean Absolute SHAP Value', fontsize=12)
plt.ylabel('Feature', fontsize=12)
plt.tight_layout()
# plt.savefig('figure_global_feature_importance_bar_with_labels.png', dpi=300)
plt.show()

# 5. SHAP摘要图 (Beeswarm Plot) - 这个图保持不变
plt.figure(figsize=(10, 8))
shap.summary_plot(shap_values, X_test, show=False)
plt.title('SHAP Summary Plot', fontsize=16)
plt.tight_layout()
# plt.savefig('figure_shap_summary_beeswarm.png', dpi=300)
plt.show()

dimension_mapping = {
    'age': 'Demographics', 'sex': 'Demographics',
    'autonomy_freedom': 'Autonomy', 'autonomy_interesting': 'Autonomy', 'autonomy_options': 'Autonomy',
    'competence_matched': 'Competence', 'competence_capable': 'Competence', 'competence_competent': 'Competence',
    'related_important': 'Relatedness', 'related_fulfilling': 'Relatedness', 'related_not_close': 'Relatedness',
    'enjoyment_fun': 'Enjoyment', 'enjoyment_attention': 'Enjoyment', 'enjoymen_boring': 'Enjoyment', 'enjoyment_enjoyed': 'Enjoyment',
    'extrinsic_avoid': 'Extrinsic Motivation', 'extrinsic_forget': 'Extrinsic Motivation', 'extrinsic_compelled': 'Extrinsic Motivation', 'extrinsic_escape': 'Extrinsic Motivation',
    'Hours': 'Playtime'
}

# 2. 计算每个特征的平均绝对SHAP值 (这部分不变)
mean_abs_shap = np.abs(shap_values).mean(axis=0)
feature_names = X_test.columns
shap_df = pd.DataFrame({
    'feature': feature_names,
    'mean_abs_shap': mean_abs_shap
})
shap_df['dimension'] = shap_df['feature'].map(dimension_mapping)

# 4. 按维度汇总SHAP重要性 (这部分不变)
dimensional_importance = shap_df.groupby('dimension')['mean_abs_shap'].sum().sort_values(ascending=False)

# 打印表格，确保您有精确的数值
print("\n--- Dimensional Importance (Ranked) ---")
print(dimensional_importance)

# 5. 可视化维度重要性 - 更新为带数值标注的图
plt.figure(figsize=(12, 7)) # 稍微调整尺寸以适应标签
ax_dim = sns.barplot(x=dimensional_importance.values, y=dimensional_importance.index, palette='viridis', orient='h')

# 在每个条形上添加数值标签
for i, v in enumerate(dimensional_importance.values):
    # v 是条形的长度 (即重要性数值)
    # i 是条形的索引 (用于定位y轴位置)
    ax_dim.text(v + 0.01, i, f'{v:.3f}', color='black', va='center', fontweight='medium') # v + 0.01 创造一点偏移

plt.xlim(0, dimensional_importance.max() * 1.15) # 调整x轴范围以容纳标签
plt.title('Aggregated Importance by Dimension with Value Labels', fontsize=16)
plt.xlabel('Total Mean Absolute SHAP Value (Contribution to Prediction)', fontsize=12)
plt.ylabel('Dimension', fontsize=12)
plt.tight_layout()
# 您可以保存这个图表
# plt.savefig('figure_dimensional_importance_with_labels.png', dpi=300)
plt.show()
