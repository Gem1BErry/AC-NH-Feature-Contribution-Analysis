# 1. 将SHAP值转换为DataFrame，方便按索引筛选
#    注意：这里的索引和 X_test 的索引是完全对应的
shap_df = pd.DataFrame(shap_values, index=X_test.index, columns=X_test.columns)

# 2. 创建一个 'analysis_df'，它包含测试集特征和所有的分组信息
#    这可以避免在后续代码中反复从原始df中匹配数据
analysis_df = X_test.copy()
# 从原始df中安全地获取分组列，并添加到analysis_df中
analysis_df['sex_code'] = df.loc[X_test.index, 'sex'] # 使用编码后的sex列
analysis_df['sex_label'] = analysis_df['sex_code'].map({1: 'Male', 2: 'Female', 3: 'Non-binary/Other'})
analysis_df['age_group_stratify'] = df.loc[X_test.index, 'age_group_stratify']

# --- 为性别分析做准备：创建 sex_importance_dfs 字典 ---
# 3. 计算每个性别组的特征重要性，并存入 'sex_importance_dfs' 字典

sex_importance_dfs = {}
# 获取测试集中实际存在的性别标签
available_sex_labels = analysis_df['sex_label'].dropna().unique()

for sex_label in available_sex_labels:
    # 找到属于当前性别组的样本索引
    group_indices = analysis_df[analysis_df['sex_label'] == sex_label].index
    
    # 如果该组没有样本，则跳过
    if len(group_indices) == 0:
        continue
        
    # 从shap_df中筛选出这些样本的SHAP值
    group_shap_values = shap_df.loc[group_indices]
    
    # 计算该组的平均绝对SHAP值
    mean_abs_shap_group = group_shap_values.abs().mean(axis=0)
    
    # 创建该组的重要性DataFrame
    group_importance_df = pd.DataFrame({
        'Feature': X_test.columns,
        'Mean_Absolute_SHAP': mean_abs_shap_group
    }).sort_values(by='Mean_Absolute_SHAP', ascending=False).reset_index(drop=True)
    
    # 将结果存入字典
    sex_importance_dfs[sex_label] = group_importance_df
# 1. 准备用于分析和绘图的DataFrame
# 我们将所有计算出的性别重要性DataFrame合并到一个大表中
all_sex_importance_list = []
for sex_label, importance_df in sex_importance_dfs.items():
    # 只要 sex_importance_dfs 中存在这个群体，就将其加入列表
    temp_df = importance_df.copy()
    temp_df['Group'] = sex_label
    all_sex_importance_list.append(temp_df)

# 检查列表是否为空
if not all_sex_importance_list:
    print("\nNo gender groups with sufficient data were found in the test set to analyze.")
else:
    # 合并成一个大的DataFrame
    all_sex_importance_df = pd.concat(all_sex_importance_list)

    # --- 修改后的代码：生成宽格式的特征重要性对比表 ---
    print("\n" + "="*80)
    print("--- Feature Importance Comparison Table (Wide Format) ---")
    print("="*80 + "\n")

    # 1. 使用 pivot_table 将长格式数据转换为宽格式
    wide_format_table = all_sex_importance_df.pivot_table(
        index='Feature',
        columns='Group',
        values='Mean_Absolute_SHAP'
    )

    # 2. 按总体重要性对特征进行排序，使最重要的特征显示在顶部
    overall_importance = wide_format_table.mean(axis=1)
    wide_format_table = wide_format_table.loc[overall_importance.sort_values(ascending=False).index]

    # 3. 打印完整的表格
    print(wide_format_table.to_string())

# =========================================================================
# --- 年龄组分析：生成综合表格与可视化图表 ---
# =========================================================================

# --- 计算部分（保持不变） ---
# 年龄组标签 (使用.dropna()确保我们只处理测试集中实际存在的年龄组)
age_group_labels = sorted(analysis_df['age_group_stratify'].dropna().unique().astype(str))

# 存储每个年龄组的特征重要性
age_importance_dfs = {}

for group_label in age_group_labels:
    group_indices = analysis_df[analysis_df['age_group_stratify'] == group_label].index
    if len(group_indices) == 0:
        continue
    group_shap_values = shap_df.loc[group_indices]
    mean_abs_shap_group = group_shap_values.abs().mean(axis=0)
    group_importance_df = pd.DataFrame({
        'Feature': X_test.columns,
        'Mean_Absolute_SHAP': mean_abs_shap_group
    }).sort_values(by='Mean_Absolute_SHAP', ascending=False).reset_index(drop=True)
    age_importance_dfs[group_label] = group_importance_df

# --- 数据整合与制表部分 ---
all_age_importance_list = []
for group_label, importance_df in age_importance_dfs.items():
    temp_df = importance_df.copy()
    temp_df['Group'] = group_label
    all_age_importance_list.append(temp_df)

if not all_age_importance_list:
    print("\nNo age groups with sufficient data were found in the test set to analyze.")
else:
    # 合并成一个大的长格式DataFrame
    all_age_importance_df = pd.concat(all_age_importance_list)

    # 1. 生成宽格式的特征重要性对比表
    print("\n" + "="*80)
    print("--- Age Group Feature Importance Comparison Table (Wide Format) ---")
    print("="*80 + "\n")

    wide_format_age_table = all_age_importance_df.pivot_table(
        index='Feature',
        columns='Group',
        values='Mean_Absolute_SHAP'
    )
    # 按总体重要性排序
    overall_age_importance = wide_format_age_table.mean(axis=1)
    wide_format_age_table = wide_format_age_table.loc[overall_age_importance.sort_values(ascending=False).index]

    # 打印完整的表格
    print(wide_format_age_table.to_string())


# 1. 设置图表大小
# 尺寸可以根据需要微调，以确保所有特征名称都能清晰显示
plt.figure(figsize=(8, 12)) 

# 2. 使用seaborn.heatmap进行绘制
heatmap_gender = sns.heatmap(
    wide_format_table,   # 使用性别组的宽格式表格
    annot=True,          # 在单元格中显示数值
    fmt=".3f",           # 将数值格式化为3位小数
    linewidths=.5,       # 在单元格之间添加细线
    cmap='viridis',      # 使用与之前性别组条形图一致的调色板
    cbar_kws={'label': 'Mean Absolute SHAP Value'} # 为颜色条(color bar)添加标签
)

# 3. 调整图表标题和坐标轴标签
plt.title('Feature Importance Heatmap Across Gender Groups', fontsize=16, pad=20)
plt.xlabel('Gender Group', fontsize=12)
plt.ylabel('Feature', fontsize=12)
plt.xticks(rotation=0) # 保持X轴标签（性别组名称）水平显示
plt.yticks(fontsize=9) # 调整Y轴标签（特征名称）的字体大小

# 4. 保存为高清晰度的矢量图格式 (非常重要！)
# 这样可以保证在论文中无论如何缩放都保持清晰
plt.savefig('gender_importance_heatmap.svg', format='svg', bbox_inches='tight')
plt.savefig('gender_importance_heatmap.pdf', format='pdf', bbox_inches='tight')

# 5. 显示图表
plt.show()


# wide_format_age_table 已经包含了我们需要的所有数据
# 我们只需要用它来绘制热力图

plt.figure(figsize=(10, 12)) # 调整图表大小以适应所有特征

heatmap = sns.heatmap(
    wide_format_age_table, # 使用你的宽格式表格
    annot=True,            # 在单元格中显示数值
    fmt=".3f",             # 数值格式化为3位小数
    linewidths=.5,         # 在单元格之间添加细线
    cmap='magma',          # 使用与之前一致的调色板
    cbar_kws={'label': 'Mean Absolute SHAP Value'} # 为颜色条添加标签
)

plt.title('Feature Importance Heatmap Across Age Groups', fontsize=16, pad=20)
plt.xlabel('Age Group', fontsize=12)
plt.ylabel('Feature', fontsize=12)
plt.xticks(rotation=0) # 保持x轴标签水平
plt.yticks(fontsize=9) # 调整y轴字体大小

# 保存为矢量图
plt.savefig('age_importance_heatmap.svg', format='svg', bbox_inches='tight')

plt.show()
